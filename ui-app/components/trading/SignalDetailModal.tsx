'use client';

import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { TrendingUp, TrendingDown, Activity } from 'lucide-react';
import { cn } from '@/lib/utils';

interface TrendContext {
  trend: 'bullish' | 'bearish' | 'neutral';
  higherTimeframeTrend: 'bullish' | 'bearish' | 'neutral';
  tradingConditions: 'excellent' | 'good' | 'fair' | 'poor';
  trendAlignment: boolean;
}

interface Signal {
  id: string;
  timestamp: string;
  symbol: string;
  action: string;
  strategy: string;
  strength: number;
  confidence: number;
  executed: boolean;
  suggestedEntry?: number;
  suggestedSL?: number;
  suggestedTP?: number;
  positionSize?: number;
  indicators?: Record<string, unknown> & {
    trendContext?: TrendContext;
  };
}

interface SignalDetailModalProps {
  signal: Signal | null;
  isOpen: boolean;
  onClose: () => void;
}

export function SignalDetailModal({ signal, isOpen, onClose }: SignalDetailModalProps) {
  if (!signal) return null;

  const trendContext = signal.indicators?.trendContext as TrendContext | undefined;
  const formatPrice = (price?: number) => price ? `$${price.toFixed(2)}` : 'N/A';
  
  const getTrendIcon = (trend: string) => {
    switch (trend) {
      case 'bullish':
        return <TrendingUp className="h-4 w-4 text-green-500" />;
      case 'bearish':
        return <TrendingDown className="h-4 w-4 text-red-500" />;
      default:
        return <Activity className="h-4 w-4 text-yellow-500" />;
    }
  };
  
  const getTradingConditionColor = (condition: string) => {
    switch (condition) {
      case 'excellent':
        return 'text-green-500 bg-green-500/10';
      case 'good':
        return 'text-blue-500 bg-blue-500/10';
      case 'fair':
        return 'text-yellow-500 bg-yellow-500/10';
      case 'poor':
        return 'text-red-500 bg-red-500/10';
      default:
        return 'text-gray-500 bg-gray-500/10';
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="bg-black border-gray-800 text-white max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center justify-between">
            <span>Signal Details - {signal.symbol}</span>
            <Badge 
              className={cn(
                "ml-2",
                signal.action === 'buy' ? 'bg-green-500' : 
                signal.action === 'sell' ? 'bg-red-500' : 
                'bg-gray-500'
              )}
            >
              {signal.action.toUpperCase()}
            </Badge>
          </DialogTitle>
          <DialogDescription className="text-gray-400">
            Generated by {signal.strategy} strategy at {new Date(signal.timestamp).toLocaleString()}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6 mt-4">
          {/* Signal Strength & Confidence */}
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label className="text-sm text-gray-400">Signal Strength</label>
              <div className="mt-1">
                <Progress value={signal.strength * 100} className="h-2" />
                <span className="text-sm text-gray-300 mt-1">
                  {(signal.strength * 100).toFixed(0)}%
                </span>
              </div>
            </div>
            <div>
              <label className="text-sm text-gray-400">Confidence</label>
              <div className="mt-1">
                <Progress value={signal.confidence * 100} className="h-2" />
                <span className="text-sm text-gray-300 mt-1">
                  {(signal.confidence * 100).toFixed(0)}%
                </span>
              </div>
            </div>
          </div>

          {/* Suggested Trading Parameters */}
          <div className="bg-gray-900 rounded-lg p-4">
            <h4 className="text-sm font-medium text-gray-300 mb-3">Trading Parameters</h4>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-500">Entry Price</span>
                <p className="font-medium">{formatPrice(signal.suggestedEntry)}</p>
              </div>
              <div>
                <span className="text-gray-500">Stop Loss</span>
                <p className="font-medium text-red-400">{formatPrice(signal.suggestedSL)}</p>
              </div>
              <div>
                <span className="text-gray-500">Take Profit</span>
                <p className="font-medium text-green-400">{formatPrice(signal.suggestedTP)}</p>
              </div>
              <div>
                <span className="text-gray-500">Position Size</span>
                <p className="font-medium">{signal.positionSize?.toFixed(4) || 'N/A'}</p>
              </div>
            </div>
          </div>

          {/* Trend Context */}
          {trendContext && (
            <div className="bg-gray-900 rounded-lg p-4">
              <h4 className="text-sm font-medium text-gray-300 mb-3">Market Trend Analysis</h4>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <span className="text-gray-500 text-sm">Current Trend</span>
                  <div className="flex items-center gap-2 mt-1">
                    {getTrendIcon(trendContext.trend)}
                    <span className="capitalize">{trendContext.trend}</span>
                  </div>
                </div>
                <div>
                  <span className="text-gray-500 text-sm">Higher Timeframe</span>
                  <div className="flex items-center gap-2 mt-1">
                    {getTrendIcon(trendContext.higherTimeframeTrend)}
                    <span className="capitalize">{trendContext.higherTimeframeTrend}</span>
                  </div>
                </div>
                <div>
                  <span className="text-gray-500 text-sm">Trading Conditions</span>
                  <Badge className={cn("mt-1", getTradingConditionColor(trendContext.tradingConditions))}>
                    {trendContext.tradingConditions}
                  </Badge>
                </div>
                <div>
                  <span className="text-gray-500 text-sm">Trend Alignment</span>
                  <Badge 
                    variant={trendContext.trendAlignment ? "default" : "secondary"}
                    className="mt-1"
                  >
                    {trendContext.trendAlignment ? 'Aligned' : 'Not Aligned'}
                  </Badge>
                </div>
              </div>
            </div>
          )}

          {/* AI Enhancement */}
          {(signal as Signal & {aiEnhanced?: boolean}).aiEnhanced && (
            <div className="bg-gray-900 rounded-lg p-4 mb-4">
              <h4 className="text-sm font-medium text-gray-300 mb-3 flex items-center">
                <span>AI Analysis</span>
                <span className="ml-2 text-xs text-blue-400">âœ¨</span>
              </h4>
              <p className="text-sm text-gray-400">
                {(signal as Signal & {aiReasoning?: string}).aiReasoning || 'AI-enhanced signal with optimized parameters'}
              </p>
            </div>
          )}

          {/* Technical Indicators */}
          {signal.indicators && (
            <div className="bg-gray-900 rounded-lg p-4">
              <h4 className="text-sm font-medium text-gray-300 mb-3">Technical Indicators</h4>
              <div className="grid grid-cols-2 gap-3 text-sm">
                {Object.entries(signal.indicators)
                  .filter(([key]) => key !== 'trendContext')
                  .map(([key, value]) => (
                    <div key={key} className="flex justify-between">
                      <span className="text-gray-500 capitalize">
                        {key.replace(/([A-Z])/g, ' $1').trim()}:
                      </span>
                      <span className="font-medium">
                        {typeof value === 'number' 
                          ? value.toFixed(4) 
                          : typeof value === 'object' 
                          ? JSON.stringify(value) 
                          : String(value)}
                      </span>
                    </div>
                  ))}
              </div>
            </div>
          )}

          {/* Execution Status */}
          <div className="flex items-center justify-between p-4 bg-gray-900 rounded-lg">
            <span className="text-gray-400">Execution Status</span>
            <Badge variant={signal.executed ? "default" : "secondary"}>
              {signal.executed ? 'Executed' : 'Pending'}
            </Badge>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
